(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{466:function(t,a,s){"use strict";s.r(a);var v=s(8),_=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"服务调用体系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务调用体系"}},[t._v("#")]),t._v(" 服务调用体系")]),t._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[t._v("服务调用体系针对的是各个服务组件的调用思路，同时还有后期业务服务组件的整合调用思路")]),t._v(" "),a("h2",{attrs:{id:"调用原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用原则"}},[t._v("#")]),t._v(" 调用原则")]),t._v(" "),a("ul",[a("li",[t._v("服务的调用针对于中小型项目和团队，服务可拆解，可重组")]),t._v(" "),a("li",[t._v("服务分为外部和内部体系，内部体系为业务服务组件设计，外部服务主要外围系统，比如App")]),t._v(" "),a("li",[t._v("每个服务为单一服务，增强业务的内聚性")])]),t._v(" "),a("h2",{attrs:{id:"架构设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#架构设计"}},[t._v("#")]),t._v(" 架构设计")]),t._v(" "),a("p",[t._v("调用架构如下:")]),t._v(" "),a("img",{staticStyle:{width:"90%"},attrs:{src:t.$withBase("/framework/07_service.png")}}),t._v(" "),a("p",[t._v("架构说明:")]),t._v(" "),a("ul",[a("li",[t._v("调用体系与传统的微服务有一定的区别，这里并不推荐所有业务微服务化，所有服务注册化")]),t._v(" "),a("li",[t._v("针对的业务场景为中小型企业，可拆解可区别，避免重依赖，强依赖关系")]),t._v(" "),a("li",[t._v("这里有后端服务和前端服务的区分，后端服务指的是微服务，前端服务指的是前端业务，")]),t._v(" "),a("li",[t._v("这里的前后服务不是前后端分离，架构设计上后端需要能会做前端调试")]),t._v(" "),a("li",[t._v("前后端分离开发则通过网关服务提供接口给前端，提前部署好后端服务并且可调试")])]),t._v(" "),a("h2",{attrs:{id:"其它"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其它"}},[t._v("#")]),t._v(" 其它")]),t._v(" "),a("ul",[a("li",[t._v("无")])])])}),[],!1,null,null,null);a.default=_.exports}}]);